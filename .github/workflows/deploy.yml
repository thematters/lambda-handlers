name: Build & Deployment

on:
  push:
    branches-ignore:
      - develop
      - main
      - master
      - stage
  pull_request:
    branches:
      - master
      - develop
      - stage
    types:
      - closed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  ECR_REPOSITORY: lambda-handlers-image
  IMAGE_TAG: develop

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - run: npm ci
      - run: npm test --if-present
      - name: Lint
        run: |
          npm run lint \
          && npm run format:check

      - name: Build & Test
        run: |
          npm run build \
          && npm run test --if-present

  build-and-publish:
    name: Build Lambda-Handlers Docker Image & Publish to AWS ECR
    if: github.event.pull_request.merged == true
    needs: build-and-test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup AWS
        if: github.base_ref == 'develop' || github.base_ref == 'stage' || github.base_ref == 'master' || github.base_ref == 'main'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        if: github.base_ref == 'develop' || github.base_ref == 'stage' || github.base_ref == 'master' || github.base_ref == 'main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR (develop)
        if: github.base_ref == 'develop'
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

  deploy-check-motor-dev:
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: build-and-publish
    steps:
      - name: re-deploy Check Motor Lambda to dev
        # run: echo call lambda re-deploy check-motor-dev
        uses: appleboy/lambda-action@master
        with:
          function: check-motor-badge-dev
          image_uri: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          handler: check-motor-badge.handler
        env:
          ECR_REGISTRY: ${{ needs.build-and-publish.outputs.registry }}

  deploy-check-motor-prod:
    runs-on: 'ubuntu-latest'
    environment: 'prod'
    needs: [build-and-publish, deploy-check-motor-dev]
    steps:
      - name: re-deploy Check Motor Lambda
        run: echo call lambda re-deploy check-motor-prod

  check-motor-dev-running:
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: [build-and-publish, deploy-check-motor-dev]
    steps:
      - name: Check if Motor Lambda running well on dev
        run: echo Invoke AWS Lambda check-motor-dev running well

  check-motor-prod-running:
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: [build-and-publish, deploy-check-motor-prod]
    steps:
      - name: Check if Motor Lambda running well on prod
        run: echo Invoke AWS Lambda if check-motor-prod running well

  ### Meili Indexer
  deploy-meili-indexer-dev:
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: build-and-publish
    steps:
      - name: re-deploy Meili Indexer Lambda to dev
        # run: echo call lambda re-deploy check-motor-dev
        uses: appleboy/lambda-action@master
        with:
          function: refresh-search-index-dev
          image_uri: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          handler: refresh-search-index.handler
        env:
          ECR_REGISTRY: ${{ needs.build-and-publish.outputs.registry }}

  deploy-meili-indexer-prod:
    runs-on: 'ubuntu-latest'
    environment: 'prod'
    needs: [build-and-publish, deploy-meili-indexer-dev]
    steps:
      - name: re-deploy Meili Indexer Lambda to prod
        run: echo call lambda re-deploy meili-indexer-prod

  check-meili-indexer-running:
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: [build-and-publish, deploy-meili-indexer-dev]
    steps:
      - name: Check if Meili Indexer Lambda running well on dev
        run: echo Invoke AWS Lambda meili-indexer-dev running well


